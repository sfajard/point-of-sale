// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id               String            @id @default(uuid())
  name             String
  sku              String            @unique
  price            Int
  discount         Float             @default(0)
  sold             Int               @default(0)
  rating           Float             @default(0)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  description      String?
  tags             String[]
  categoryId       String
  category         Category          @relation(fields: [categoryId], references: [id])
  stock            Int               @default(0)
  transactionItems TransactionItem[]
  imageUrls        Image[]
  cartItems        CartItem[]
  isFeatured       Boolean
}

model Category {
  id         String    @id @default(uuid())
  name       String
  isFeatured Boolean   @default(false)
  imageUrls  Image[]   @relation("CategoryImages")
  products   Product[]
}

model Image {
  id        String   @id @default(uuid())
  url       String
  productId String?
  product   Product? @relation(fields: [productId], references: [id])

  categoryId String?
  category   Category? @relation("CategoryImages", fields: [categoryId], references: [id])
  createdAt  DateTime  @default(now())
}

model Transaction {
  id               String            @id @default(uuid())
  transactionItems TransactionItem[]
  totalAmount      Int
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  user             User?             @relation(fields: [userId], references: [id])
  userId           String?
  status           String            @default("pending")
  orderId          String

  invoiceId      String?        @unique 
  invoiceNumber  String?        @unique
  paymentLinkUrl String?
  pdfUrl         String?

}

model Cart {
  id     String     @id @default(uuid())
  userId String     @unique
  user   User       @relation(fields: [userId], references: [id])
  items  CartItem[] // relasi ke CartItem

  @@index([userId])
}

model CartItem {
  id        String  @id @default(uuid())
  cart      Cart    @relation(fields: [cartId], references: [id])
  cartId    String
  product   Product @relation(fields: [productId], references: [id])
  productId String
  quantity  Int     @default(1)

  @@unique([cartId, productId])
}

model TransactionItem {
  id            String      @id @default(uuid())
  quantity      Int
  price         Int
  transactionId String
  transaction   Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)
  productId     String
  product       Product     @relation(fields: [productId], references: [id])

  @@index([transactionId])
  @@index([productId])
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?     @map("email_verified")
  image         String?
  role          String        @default("user")
  phone         String?
  accounts      Account[]
  cart          Cart?
  transactions  Transaction[]

  @@map("users")
}
